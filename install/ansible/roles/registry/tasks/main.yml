---
- name: Change the oc context
  command: "oc config use-context {{ default_context }}"

- name: Switch to default project
  command: oc project default

- name: Patch to support infrastructure components witin region=infra
  command: oc patch namespace/default -p '{"metadata":{"annotations":{"openshift.io/node-selector":"region=infra"}}}'

- name: Check whether a registry exists or not
  command: oadm registry --dry-run
  register: registry_out
  ignore_errors: true
  
- name: Install registry
  command: "oadm registry --credentials=/etc/origin/master/openshift-registry.kubeconfig --images='{{ registry_image_url }}'"
  when: registry_out | failed

# figure out the registry deployment and wait for it to be running before continuing
- include: registry_wait.yml

# we use a template to then lay down YAML to create the PV
# this sets facts that are then consumed in the template
- name: Set the facts for the registry PV template
  set_fact:
    pv_name: "registry-pv"
    capacity: "50"
    vol_path: "/var/export/vol3"
    vol_hostname: "{{ nfs_internal_hostname }}"

- name: Create a YAML file for the PV for the Registry volume
  template:
    src: pv.yml.j2
    dest: /root/registry-pv.yml

- name: Check for registry PV
  command: oc get pv "{{ pv_name }}"
  register: registry_pv_out
  ignore_errors: true

# as before
- name: Set the facts for the registry PVC template
  set_fact:
    claim_name: "registry-pvc"
    capacity: "50"
    access_mode: "ReadWriteMany"

- name: Check for registry PVC
  command: oc get pvc "{{ claim_name }}"
  register: registry_pvc_out
  ignore_errors: true

- name: Create a YAML file for the PVC for the Registry volume
  template:
    src: pvc.yml.j2
    dest: /root/registry-pvc.yml

- name: Create PV from YAML for registry EBS volume
  shell: cat /root/registry-pv.yml | oc create -f -
  when: registry_pv_out | failed

- name: Create PVC from YAML for registry EBS volume
  shell: cat /root/registry-pvc.yml | oc create -f -
  when: registry_pvc_out | failed

- name: Disable config change trigger on registry DC
  command: oc patch dc/docker-registry -p '{"spec":{"triggers":[]}}'

- name: Check if registry is still using empty directory
  command: oc volume dc/docker-registry
  register: registry_dc_out

- name: Attach volume to registry DC
  command: >
    oc volume dc/docker-registry --add --overwrite -t persistentVolumeClaim
    --claim-name=registry-pvc --name=registry-storage
  when: "'empty directory' in registry_dc_out.stdout"
  register: registry_volume_attached

- name: Check if fsGroup is set in registry DC
  shell: "oc get dc/docker-registry -o yaml | grep fsGroup"
  register: fsgroup_out
  ignore_errors: true

- name: Determine default project supplemental group
  command: oc get project default -o json
  register: default_project_out
  when: fsgroup_out | failed

- name: Process the default project json into a fact
  set_fact:
    default_project_json: "{{ default_project_out.stdout | from_json }}"
  when: fsgroup_out | failed

- name: Patch the docker registry DC with the fsGroup
  command: oc patch dc/docker-registry -p '{"spec":{"template":{"spec":{"securityContext":{"fsGroup":{{ default_project_json["metadata"]["annotations"]["openshift.io/sa.scc.supplemental-groups"].split("/").0 }}}}}}}'
  when: fsgroup_out | failed

- name: Deploy latest configuration of registry DC
  command: oc deploy docker-registry --latest
  when: fsgroup_out | failed or registry_volume_attached | success
  register: deploy_latest

- name: Re-enable config trigger on docker-registry
  command: oc patch dc/docker-registry -p '{"spec":{"triggers":[{"type":"ConfigChange"}]}}'
  when: deploy_latest | success

# figure out the registry deployment and wait for it to be running before continuing
- include: registry_wait.yml

